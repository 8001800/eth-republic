
// Use by running 'testrpc -a 100 -s republic'
const keys = `
(0) b255574ed707d540cca0c978ca402d2430420a2c6c55d4fe522eea4a0b69f09f
(1) 47491cedffb9285e20119a429754ba27961a030e7369533161b696deea18e251
(2) cf36262e5521413fd9d796d916bc8ac2be5f91eead765c965ca48ee21c702852
(3) ae3cda31020df8162fcf8d729a0d9cdbb898011308d2b6ec364ed03d1d8abcc1
(4) 69039dc7518cb911bd3863da22b8f0bec8ecc2594a1f2ee46b35e6dedc3bd243
(5) b2908c5ffd780c8c8e87a13d88838be922e0e1b90d3c4a22ab50dd045a4911e8
(6) f8a369b867c416b9025f3950be90dfa21704785467d679e9d0c33351ad0b9e17
(7) 96cb6b6dc206857501ade98d9603ad2361ed23197637ba74c1ea15a7f52a2071
(8) 143ce90fc79f2a55afe43f4c7de25d3ed5c0fcc0abfddd3ea2047720e757c13c
(9) cb1cbe337371d7c6a6c380b6fd25ace195a55d166e074ec85f8d5743fa908ec7
(10) f8725ad6f567f25ab51a3372cad038e0d43eeac876c0d72650cfca30b6481097
(11) c115b94c2c428228c86957b6a5c9b43d76ef91cb1369b48784f5116ca61413df
(12) 9ddf36ce5ca69f4d1b8c18ff19573106c235bf8a01e66a9f378e8ba73dca2221
(13) 71612c940e989e552c4b14235cc24674a388b87e3a45c91f42394a467d612a67
(14) 94701359ee110884010962ef77a42f796a8d97a806183ac00fb08da6c24c4924
(15) 4bb64cb1cd7dc991211dfd039f419cbcd4e62cfe134977b2bc722cd6d107031f
(16) 6310c58d9c100e6d4e8245e4f5b1e9213254fd2db7447c09efc1e49efcf7577f
(17) 50451e1b662afd6119a40266854d9a54ed60d6bb940579a6f2d45e5cb8057e77
(18) c6a00783ff0b40a60c3eea0ff719eb382bb256f51c07f4141acc1b668576c754
(19) db118876b5744e9f7e26f2d26fafef982b1a2d909eac259646a4c3ab693c2889
(20) 78fc70c76fab57c1b6c3f12cca64ff0c45912a8941a65427710d98cef918e593
(21) 9bf92945b14755692d85f27f239f895ffff79060f9b23edaf65d26a370b2cdda
(22) 3f848df7df02e695f69c2f7daa960ecd3d647b7fbaa62ae31b6d8d1be03a67fd
(23) 7e897119d063090bff0504185626766fb66d2eb7dd8c0ae152e557a4761953f6
(24) 3a42fdd095f38be32c1e77fefb4804b7821eb536a611962b9c266720b03f9442
(25) 4a99c1d4f4b4293090d1d31d500703b1d9f864f988042480cb8bebaaee8addbc
(26) 39d3ce75cf5401637f356ac4aa56f22712e01748fa875a07d2f5704a0c6519f7
(27) fb2aca744e8f98e2f2bead4aad3e9a49ef311b523822238ca92f6e2875645c71
(28) aa29066579e6c9b7605710cb12df988d7793f98fc5a6aa1245d19e57a905c6a2
(29) c057502336b0393ec5e5493457a271f35ad6f1315cc7a2fcbf3a54bb71fd107d
(30) 5f5b90ad9b20f89e7221d3aa974feaffa05af7b5578d81fd2682e751be86a7ee
(31) d3af09a89d0455019fcf8b874f72a8c0b5523d3600b24751046da81d1f515d7c
(32) b888a8782f9e3d3322a6642d83676ad314494a4524e6b81999ddeaafebb12a77
(33) 7ef6350f5932f810dc422e97415b297f1a5dfdd648642b96382b4048dad441a4
(34) 8065a1bdbffae5ec57ad71b067cc31d8f2ca1be21e9203b6e86a77845a10f4f5
(35) f94e61a20e966d7d0553d80a5e886fd7fbb22523913e55fbd7721752d5391e8e
(36) 96fe352ffc9df935c32d8674f2e749334b333f5d939a3492f40d0ecca6d0c5df
(37) 0e2a5e391f8481e34606002555a5d5fc175376dca33db6ec865327230406a962
(38) 2209297dc73ac714753a7c4b2ec9fd8534afb45eb97c68373f36fce55eb1b16c
(39) d56c70876c5eefd6d4ba08a17cecd961b1190613a8f32bb6279359f67b2b0b83
(40) 92efbf049c484b2bbab23d68ecbc9057fe643ecce9fabce109a65efc87709594
(41) b73ef10c77af7cdd4f9dd1d83084b82f4ed864eb2f8242601fadf7be56ee1030
(42) 5b25e577a8d3c43b4edd56c5310b917a2a757decd8ac1a88e9aa491dd0c98511
(43) cefb6b5d64e27949ff12f3c8c55f2575dd8718ec35db222c4a7903840b1cd7cd
(44) f0660ba3007166db075107a109b356b3e26e787cb1aeea054c6ce6a8cdc66502
(45) 638045726c1b16c6968687d5ae07a4713922628aaf050d919a99090f4c65d1b5
(46) 20e867ccb2c152aacb1b4cf964598d724389ece3aebbccf50340fc73ac7435bb
(47) 210cf97266be7dfc8d7c00ab0ded142076059a9c728be546dc7398cc8d4b7410
(48) f9ef2523eabfa2fdbd3e3dbb6217215262e1c7e01febef88447aaf4386f71417
(49) 6a412a80ec6bad3b497ea73f3e8418766425fd371df4052701f8c221a22a6883
(50) b0b4d9f70d494a3085d14ff082ea815763204171082e8b452251f63473dc0bf8
(51) c91d759a8b031fd1df3bf9711c60e3ddd08de67e6208c5c29395a113f35b8015
(52) 7cb857ca3dd0b53599b2533fa49852f277d8912cfa45612ba80467e6929b0449
(53) 17b6844855926fc030bbb446d346ad0b4bafc0f7a70836b4200a64570d379131
(54) ea611a8fb63e6c10105a7c5331f8ddb2e826cb39469b5d0c07cdf03ca7a83d0f
(55) daeb2c6262f0a496f5df6d8bbfb8f3f7772436f874ea2a783da1224f55ecbbfb
(56) b6d57a2b14025b1ab00e1758a1eee3dbc67c32fda0415765a96838b983db940b
(57) ae9f2cd7d026752c11f788f98f7c2ce00748e82a7964220839d8a2a22e1e25ca
(58) 8199b9594718bea2025708358d845ebdc1e9dd34b74597ba900907d2e817acaf
(59) 75ff33e1254021a6ab5f78a3ebf55e5509908ad0a2e1bc494f804caa6b199671
(60) 7ff0907aec119640bba1df3db470af0a4f61089c03b92be20768db14963c21c6
(61) ea5268986802b7ebb0d713c56dd33cdd2fdf556f7aae41a5cceb9772fe8e335f
(62) 08db7d51a9203a5276fbaba78784239dfa6ee737946b0af26bf194f46ac7930d
(63) 2fef97ecb5a69157f51a28f5e13bf8bc21e90373bac5e6f2dbce9758cedc0ced
(64) ea4b8b2d4ec69fff645a7182e4f559e1e3a37ee5faaa93c0dd7404a15cb179c6
(65) eb8788a60a459e075828e56266169974f76889ec5f4f546d4b4ce5789f06a9ed
(66) fc6c38cd7018901e052fa4fa7b8ba56fb012d2c46322bb5bab4c1312c5e88a99
(67) 1b0fab52517225bef75e342daa6ae13b485ad10076d25273f7b285984aac5c26
(68) c2830386037efd5928c39b7daf401e63ba986ecb37cf9b597b03f371ab04e184
(69) b69fe80cce2ce3b2f7c6d1a78d4efecd85bc7b68b57815d46e32c966cdf783e5
(70) b9c3fd498eb6c23ba5310d6927d0eddfb0b9f38112fa262d4e23b189d36a5a65
(71) 5751d575d2602ddeb4b2113e6179d032e630d55d585fcbd8128f95fdc7b620e4
(72) 3413694cdac857addfdb45bc222dea909cef41cfa8e01e5d64e3f9ca028853b6
(73) cf45f0e1e595bf6ff838971a564c31c07759f2e64aab10c0b1990fa5ca4436f7
(74) 4edf77213530c53918e560ede29e27f6470c7506ad55ee2956895874e162eeb0
(75) c40691ed9618fd433038ae3877879206005f7072f4a39476bcbc0cb844413cff
(76) 9d9505cad5f065ea3bd528251a57d79fe47ddfd84faef04b5a8e2ce80f38861c
(77) 0ce4557d457a443fa2c8d2f54e57b8e9bcad45615de4cd211b08149f09424725
(78) c163246c75fa2622960da86f08051fb955c419febea71f2902a5b38facf76114
(79) 081081dafdb77c95bd0c40e7bfb6087aac9bd23a83dc28bbd44a14e5658ed317
(80) 50067fd18266f643035878be126c020745f6c5cb7e764f9f5a76cfc27aff657f
(81) b9f6b83032fb29941a238ab3194339498c4af7625b4ab694764ded5ded682900
(82) 73734861811e75456b37089fd44dc80e5f3c6c8908a3ffa2b17ddb1a74a806d5
(83) 160c56d2937d4689ef17a2110c69db59385d225a57e0cc91236152d7c4d1f9a4
(84) 6e31c3d1e8eb2bae6e2e1ef24b63a709bad4ace9a9a25e578e54a526b9f738cc
(85) 7f805ee9778b3991759b78ae2a3302c017027d50980df2cd73054b6c674b2d32
(86) a001f6f37314c9ed67b1c4c90beb85f92f12e770a4d1eaeb94203dea96d4dda3
(87) 95083f2945eb5adac18dea53c89930c2b09494781412d92e25a9b4e0bcdfe47e
(88) 0257befb63debdf5216c79e3329fe764b078ac3b73f7fd3bca530641e8b8c155
(89) a891a008df4822b054f6c1747d6c42e55a1a7430d7b4ec29f125edde67f98e59
(90) d356d8e21ee10a37a07cf03c9ecabecb528942f5a048c726f8019a10da3349e4
(91) cc33dabf9db918c3572965338ff4f41fe64d4f5a499a768544e7c14968682fdf
(92) 28390bba0c7e58080ce4e8c337e1b66882a73a97385b23bb77f107f5359ac27d
(93) a49ae8c254f7cfc407338dce61fbcf7c9e7f470af0b024e7730aef14faf90246
(94) e66c2757883153e2a3e829dbe3f8edbb5bd47a4fc874b88c6f8f141d6f7f9486
(95) 8cc58b364559bc91d8785cd7fef212e169971c04ebfb0bc07943caa6795c7022
(96) c771371687e914d7dda261d501d7ad06e6fcb236d8c24e1db2d982d02d8765ca
(97) c8e5f8f4a5e45f23817f510c142e9b3f4c4af6840749c9ce89cd6441ec035053
(98) 8cd0d01c2727a838e6067e6efa7d1486f0760683407d9fe04549e092a05c5a06
(99) ad7e6af69d7bdbd2fa303fbc9e10d39ecef39b61dd203e9db1f74ad6ff702eaa
`;


const secp256k1 = require('secp256k1');
const createKeccakHash = require('keccak')

const sha3 = function (msg) {
  return createKeccakHash('keccak256').update(msg).digest()
}

const privateToPublic = function (privateKey) {
  const privateKeyBuf = Buffer.from(privateKey.slice(2), 'hex');
  return `0x04${secp256k1.publicKeyCreate(privateKeyBuf, false).slice(1).toString('hex')}`;
}

const publicToAddress = function (publicKey) {
  const publicKeyBuf = Buffer.from(publicKey.slice(2), 'hex');
  return `0x${sha3(publicKeyBuf.slice(1)).slice(-20).toString('hex')}`;
}

const publicToRepublic = function (publicKey) {
  const publicKeyBuf = Buffer.from(publicKey.slice(2), 'hex');
  // Prepend 0x04, hash, take first 32 bytes
  return `0x${sha3(publicKeyBuf).slice(0, 20).toString('hex')}`;
}

const ethaddrRegex = /[0-9A-Fa-f]{64}/g; // Finds all 64 character hex strings (ethereum private keys)
const accounts = (keys) => {
  const priv = keys.match(ethaddrRegex).map(key => "0x" + key);
  const pubs = priv.map(key => privateToPublic(`${key}`));
  const addresses = pubs.map(pub => publicToAddress(pub));
  const repIds = pubs.map(pub => publicToRepublic(pub));

  const indexMap = {};

  const ret = [];
  for (let i = 0; i < priv.length; i++) {
    ret.push({
      private: priv[i],
      public: pubs[i],
      address: addresses[i],
      republic: repIds[i],
    })
    indexMap[repIds[i]] = i;
  }

  return {
    accounts: ret,
    indexMap: indexMap,
  };
}


module.exports = accounts(keys);